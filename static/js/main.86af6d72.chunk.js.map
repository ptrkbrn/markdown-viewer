{"version":3,"sources":["scripts.js","App.jsx","serviceWorker.js","index.js"],"names":["toggleWindow","e","window","target","closest","wrap","taskbar","document","querySelector","App","classList","toggle","parentElement","append","prepend","renderer","marked","Renderer","Editor","props","className","onClick","id","value","input","onChange","Preview","output","dangerouslySetInnerHTML","link","href","title","text","setOptions","gfm","breaks","state","handleChange","bind","createMarkup","currentX","currentY","initialX","initialY","container","active","xOffset","yOffset","zindex","dragEnd","addEventListener","clientX","clientY","console","log","contains","selectedWindow","querySelectorAll","style","zIndex","dragItem","stopPropagation","xPos","yPos","el","transform","setTranslate","this","setState","__html","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86af6d72.chunk.js","sourcesContent":["function toggleWindow(e) {\n  const window = e.target.closest('.window');\n  const wrap = e.target.closest('.wrap');\n  const taskbar = document.querySelector('.taskbar');\n  const App = document.querySelector('.App');\n  e.target.classList.toggle('fa-window-minimize');\n  e.target.classList.toggle('fa-window-maximize');\n  window.classList.toggle('is-minimized');\n  wrap.classList.toggle('is-minimized');\n  wrap.parentElement === App ? taskbar.append(wrap) : App.prepend(wrap);\n}\n\nexport default toggleWindow;\n","import React from 'react';\nimport marked from 'marked';\nimport './App.css';\nimport toggleWindow from './scripts';\n\nconst renderer = new marked.Renderer();\n\n// clicked links open in a new tab.\nrenderer.link = function (href, title, text) {\n  return `<a href=\"${href}\" target=\"_blank\">${text}</a>`;\n};\n\n// carriage return inserts linebreak.\nmarked.setOptions({\n  renderer,\n  gfm: true,\n  breaks: true,\n});\n\nfunction Editor(props) {\n  return (\n    <div className=\"wrap\">\n      <div className=\"editor window\">\n        <div className=\"top-bar\">\n          <div className=\"left\">\n            <i className=\"icon fas fa-edit\" />\n            <div className=\"title-block\">\n              <span className=\"title\">Editor</span>\n              <span className=\"description\">Enter markup text</span>\n            </div>\n          </div>\n          <button onClick={toggleWindow} className=\"icon far fa-window-minimize\" />\n        </div>\n        <textarea id=\"editor\" className=\"content\" value={props.input} onChange={props.onChange} />\n      </div>\n    </div>\n  );\n}\n\nfunction Preview({ output }) {\n  return (\n    <div className=\"wrap\">\n      <div className=\"preview window\">\n        <div className=\"top-bar\">\n          <div className=\"left\">\n            <i className=\"icon fas fa-eye\" />\n            <div className=\"title-block\">\n              <span className=\"title\">Preview</span>\n              <span className=\"description\">Markup text is rendered here</span>\n            </div>\n          </div>\n          <button onClick={toggleWindow} className=\"icon far fa-window-minimize\" />\n        </div>\n        <div className=\"output content\" id=\"preview\" dangerouslySetInnerHTML={output} />\n      </div>\n    </div>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // eslint-disable-next-line no-multi-str\n      input: '# Hey there!  \\n## Here\\'s an H2!  \\n\\\nWelcome to Pat Breen\\'s markdown viewer!  \\n\\\nI made it using [marked.js](https://marked.js.org)  \\n\\\nWith markdown, you can do all kinds of cool stuff, like  \\n\\\n  - **add emphasis**  \\n\\\n  -  `<div>look, here\\'s some code!!</div>`  \\n\\\n  \\n\\\nOk so that\\'s what markdown is. Now I\\'m going to use it to talk about... Aqua Teen? I guess? For now \\n\\\n> Aqua Teen Hunger Force (also known by various alternative titles) is an American  \\n\\\n> adult animated television series created by Dave Willis and Matt Maiellaro  \\n\\\n> for Cartoon Network\\'s late night programming block, Adult Swim.  \\n\\\n> It is about the surreal adventures and antics of three anthropomorphic fast food items:  \\n\\\n> Master Shake, Frylock, and Meatwad, who live together as relatives  \\n\\\n> and frequently interact with their human next-door neighbor,  \\n\\\n> Carl Brutananadilewski.  \\n\\\n  \\n\\\n![Aqua Teen Hunger Force](./assets/aqua_teen.png)  \\n\\\n```  \\n\\\n      I forgot the  \\n\\\n      indented code block!  \\n\\\n```',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.createMarkup = this.createMarkup.bind(this);\n  }\n\n  componentDidMount() {\n    const container = document.querySelector('.App');\n\n    let active = false;\n    let currentX;\n    let currentY;\n    let initialX;\n    let initialY;\n    let xOffset = 0;\n    let yOffset = 0;\n    let zindex = 10;\n\n    function dragStart(e) {\n      initialX = e.clientX - xOffset;\n      initialY = e.clientY - yOffset;\n\n      console.log('start drag');\n      console.log(e.target);\n      console.log(zindex);\n\n      if (e.target.classList.contains('top-bar')) {\n        active = true;\n        const selectedWindow = e.target.closest('.wrap');\n        const siblings = document.querySelectorAll('.wrap');\n        // Array.prototype.map.call(siblings,\n          // eslint-disable-next-line no-param-reassign, no-unused-expressions\n        //   (sibling) => { sibling === selectedWindow ? sibling.style.zIndex = '10' : sibling.style.zIndex = '1'; });\n        selectedWindow.style.zIndex = zindex;\n      }\n    }\n\n    function dragEnd() {\n      initialX = currentX;\n      initialY = currentY;\n      zindex += 1;\n      active = false;\n    }\n\n    function drag(e) {\n      if (active) {\n        const dragItem = e.target.closest('.wrap:active');\n        console.log(dragItem);\n        e.stopPropagation();\n\n        currentX = e.clientX - initialX;\n        currentY = e.clientY - initialY;\n\n        xOffset = currentX;\n        yOffset = currentY;\n        console.log(currentX, currentY);\n        setTranslate(currentX, currentY, dragItem);\n      }\n    }\n\n    function setTranslate(xPos, yPos, el) {\n      if (el === null) {\n        dragEnd();\n        return;\n      }\n      el.style.transform = `translate3d(${xPos}px, ${yPos}px, 0)`;\n    }\n    container.addEventListener('mousedown', dragStart, false);\n    container.addEventListener('mouseup', dragEnd, false);\n    container.addEventListener('mousemove', drag, false);\n  }\n\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n    });\n  }\n\n  createMarkup() {\n    return { __html: marked(this.state.input) };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Editor input={this.state.input} onChange={this.handleChange} />\n        <Preview output={this.createMarkup()} />\n        <div className=\"taskbar\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './partials/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}